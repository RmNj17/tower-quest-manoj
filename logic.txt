This alogorithm is the implementation for the task 2 of the given task. Just replace the handleBoxClick function in the TowerQuestBase with this to see the working of the alogorithm. I haven't implemented it directly so that the user won't be confused and for the simpler user interface

const handleBoxClick = (floorIndex) => {
    if (gameStatus !== "playing" || floorIndex + 1 !== currentFloor) return;
    let gemProbability;
    let payout;

    switch (difficultyLevel) {
      case "normal":
        gemProbability = 0.9;
        break;
      case "medium":
        gemProbability = 0.8;
        break;
      case "hard":
        gemProbability = 0.65;
        break;
      case "impossible":
        gemProbability = 0.5;
        break;
      default:
        gemProbability = 0.8;
        break;
    }

    gemProbability -= (currentFloor - 1) * 0.05;
    const isGem = Math.random() < gemProbability;

    if (isGem) {
      if (currentFloor === totalFloors) {
        setGameStatus("won");
        setAutoPlay(false);
        payout = 1;
      } else {
        setCurrentFloor(currentFloor + 1);
        payout = 0.5;
      }
    } else {
      setGameStatus("lost");
      setAutoPlay(false);
      payout = 0; 
    }
    const rtp = 0.98;
    const expectedReturn = gemProbability * payout + (1 - gemProbability) * 0;
    const adjustedBet = betAmount / expectedReturn;
    const payoutAmount = adjustedBet * payout;
    const rtpAdjustedPayout = rtp * payoutAmount;

    setPayoutAmount(payoutAmount);
    setRTPAdjustedPayout(rtpAdjustedPayout);
  };